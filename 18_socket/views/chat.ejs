<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>socket - 채팅 프로그램</title>

  <!--socket.io CDN-->
  <script src="https://cdn.socket.io/4.5.3/socket.io.min.js" integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous"></script>

<!--
<style>
.background{
  background-color: rgb(127, 181, 224);
  width: 400px;
  height: 600px;
  
}

.chat-list{
padding-top: 50px;
width: 400px;
height: 550px;

}

.my-chat{
background-color: rgb(232, 232, 12);
width: 100px;
height: 40px;
/* border-radius: 10px; */

border-top-right-radius: 0px;
border-top-left-radius: 15px;
border-bottom-left-radius: 15px;
border-bottom-right-radius: 15px;

transform: translateX(280%);
display: flex;
justify-content: center;
align-items: center;
flex-direction: column;
}

.other-chat{
background-color: white;
width: 100px;
height: 40px;
/* border-radius: 10px; */

border-top-right-radius: 15px;
border-top-left-radius: 15px;
border-bottom-left-radius: 0px;
border-bottom-right-radius: 15px;

transform: translateX(15%);
text-align: center;
display: flex;
justify-content: center;
align-items: center;
flex-direction: column;
}

</style>
-->

<style>
  .chat-list{
    background-color: skyblue;
    width: 50%;
    height: 500px;
    padding: 10px;
    overflow: auto;
  }

  .chat-list div {
    margin-top: 3px;

    border-top-right-radius: 0px;
    border-top-left-radius: 15px;
    border-bottom-left-radius: 15px;
    border-bottom-right-radius: 15px;
  }


  .chat-list div div {
    display: inline-block;
    padding: 3px;
  }

  .my-chat{
    text-align: right;
  }

  .my-chat div {
    background-color: yellow;
  }

  .other-chat div{
    background-color: white;

    border-top-right-radius: 15px;
    border-top-left-radius: 15px;
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 15px;
  }

  .notice{
    text-align: center;
    color: navy;
    font-size: 12px;
  }

  .d-none{
    display: none;
  }
</style>

</head>
<body>
  <h1>socket.io</h1>

  <!--실습 44-2 채팅창 입장 문구 안내 socket.id -> nickname-->
  <div class="entry-box">
    <input type="text" id="nickname" placeholder="닉네임" autofocus>
    <button type="button" onclick="entry();">입장</button>
  </div>

  <div class="chat-box d-none">
    <div id="chat-list" class="chat-list">
      <!-- <div class="my-chat">
        <div>user1: msg1</div>
      </div>
      <div class="other-chat">
        <div>user2: msg2</div>
      </div>
      <div class="notice">xx가 입장했습니다.</div> -->
    </div>
    <select id="nick-list">
      <!-- <option value="all">전체</option>
      <option value="socketId1">nick1</option>
      <option value="socketId2">nick2</option> -->
    </select>에게
    <input type="text" id="message"/>
    <button type="button" onclick="send();">전송</button>
  </div>



  <script>
  let socket = io.connect();
  let myNick; //내 닉네임 설정

  socket.on('connect', ()=>{
    console.log(socket.id)
})



//[실습 44] notice 띄우기
  socket.on('notice', (msg)=>{

    document.querySelector('#chat-list').insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`)
  })

//[실습 44-2] 채팅창 입장 안내 문구 nickname버전
function entry() {
  console.log(document.querySelector('#nickname').value);

  socket.emit('setNick', document.querySelector('#nickname').value);
}

socket.on('entrySuccess', (nick)=>{
  myNick = nick;
  //입력창 비활성화
  document.querySelector('#nickname').disabled = true;
  //버튼 비활성화
  document.querySelector('.entry-box > button').disabled = true;
  //채팅 박스 보여주기
  document.querySelector('.chat-box').classList.remove('d-none');
})

//error 문구 띄우기
socket.on('error', (data)=>{
  alert(data);
})


//[실습 45] 채팅창 메시지 전송 step1
// send 이벤트 전송
function send() {
  const data = {
    myNick: myNick, //"entrySuccess" 이벤트에서 입장 성공시 설정하는 내 닉네임
    dm: document.querySelector('#nick-list').value, //현재 선택된 select 태그의 option 값
    msg: document.querySelector('#message').value,
  }
  socket.emit('send', data)
}

//[실습45] step2
// "newMessage" 이벤트 전달받기
socket.on('newMessage', (data)=>{
  console.log('newMessage>> ', data);

  //생성해야하는 html 구조
  // <div class="my-chat">
  //       <div>user1: msg1</div>
  //     </div>
  //     <div class="other-chat">
  //       <div>user2: msg2</div>
  //     </div>
  let chatList = document.querySelector('#chat-list'); //#chat-list 선택
  let div = document.createElement('div'); // .my-chat or .other-chat 생성
  let divChat = document.createElement('div'); // 가장 안쪽 div (메시지 박스)생성

  //세 메시지가 도착했을때
  //myNick에 저장된 현재 내 닉네임과 세 메시지의 nick이 
  // 같다면 => 내가 보낸 채팅
  // 다르다면 => 상대방이 보낸 채팅
  if (myNick == data.nick) {
    div.classList.add('my-chat');//<div class="my-chat"></div>
  } else {
    div.classList.add('other-chat');//<div class="other-chat"></div>
  }


  // [실습 46] DM 기능 추가
  console.log('send data check >> ' , data);

  if(data.dm) {
    div.classList.add('secret-chat');
    divChat.textContent = data.dm; // (속닥속닥) 글자 추가
  }


  divChat.textContent += `${data.nick} : ${data.msg}`; //<div>nick : msg</div>
  div.append(divChat);
  chatList.append(div);
})


//[실습 46] DM 기능 추가
socket.on('updateNicks', (nickArray) =>{
  console.log('updateNicks >> ', nickArray);

  
  //[미션] - 유저 목록을 option태그로 만들어서 select에 추가
      //select 태그 내부에 추가되어야 할 코드 형식
      // <option value="all">전체</option>
      // <option value="socketId1">nick1</option>
      // <option value="socketId2">nick2</option>
      let options = `<option value='all'>전체</option>`;


// 1. 반복문 사용하여 option 태그 하나하나 완성
for (const Key in nickArray) {
  console.log(`${Key}, ${nickArray[Key]}`);
  console.log(`<option value="${Key}">${nickArray[Key]}</option>`);

  // options = options + `<option value="${userKey}">${nickArray[userKey]}</option>`;  => x = x + 1
  options += `<option value="${Key}">${nickArray[Key]}</option>`; //위와 같은 코드 축약형!
}

// 2. select 태그에 option 태그들을 추가
  document.querySelector('#nick-list').innerHTML = options;
})




  </script>




<!--
  <button onclick="sayHello();">hello</button>
  <button onclick="sayStudy();">study</button>
  <button onclick="sayBye();">bye</button>
  <p id="from-server"></p>
-->

<!--
  <script>
    let socket = io.connect(); // socket 사용을 위한 객체 생성

    socket.on('connect', ()=>{
      console.log('**CLIENT SOCKET CONNECTED = ', socket.id);
    })

    //button에서 onclick 함수 선언함
    function sayHello() {
      //서버로 메시지 보내기
      socket.emit('hello', { who: 'client', msg: 'HELLO!'});

      //클라이언트 -> 서버에서 받은 메시지를 클라이언트에서 보이게 하기
      socket.on('helloKr', (data)=>{
        console.log('socket on helloKr >> ',data);
        
        document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`;
      })
    }

    //리팩토링 -> 클라이언트에 보일 메시지 코드가 전부 같으므로, 함수로 빼서 한 번만 작성할 수 있음.(기존 함수에 있던 메시지 코드들은 다 삭제해야 함!)
    // function setMsg(obj) {
    //   document.querySelector('#from-server').textContent = `${obj.who} : ${obj.msg}`;
    // }


    function sayStudy() {
      socket.emit('study', {who: 'client', msg: 'STUDY WITH ME!'});
      socket.on('studyKr', (data)=>{
        console.log('socket on helloKr >> ', data.who);
        document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`;
      })
    }


    function sayBye() {
      socket.emit('bye', {who: 'client', msg: 'BYE BYE!'});
      socket.on('byeKr', (data)=>{
        console.log('socket on byeKr >> ', data.who);
        document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`;
      })
    }
  </script>
-->
</body>
</html>