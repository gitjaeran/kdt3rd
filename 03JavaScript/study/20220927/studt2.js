console.log('hi');
// 변수: 변할 수 있는 수. 데이터 보관함. 정해진 값이 아닌 수.
// 어떤 값을 저장하기 위한 메모리 공간을 "식별"하고자 붙인 이름


// 1. 변수 선언
// 2. 값 할당

// 변수 선언: 값의 이름을 붙여준다.
// 할당: 선언한 이름 안에 어떤 값을 넣을것인가?

/*
변수 선언 방법 3가지
1. var 변수이름;
2. let 변수이름;
3. const 변수이름 = 값;
*/


// 1. var 키워드
// - 중복 선언이 가능하다!
var a; //선언
console.log(a); //undefined: 값 할당 안된 경우
a = 2; //할당
console.log(a); //2

var a = 3; //선언과 할당 한꺼번에 하기 + 재선언 -> 바람직하지 않은 코드! 하지만 js에서는 문제삼지 않으므로 주의해야한다.
console.log(a);

a = 4;
console.log(a);

a = 10;
console.log(a);

//var 문제점: 변수 재선언을 문제삼지 않는다.

aa = 123; 
//변수를 선언하지 않고 값만 할당했는데도 출력되는 문제점이 있다.
//유지보수에서 최악.
console.log(aa);




// 2. let 키워드
// - 변수 중복선언 불가능
// - 값 재할당은 가능
let c; //선언
console.log(c); //undefined: 값을 할당하지 않고 선언만 한 경우
c = 4;

// let c = 4;
//c를 재선언하면 에러가 난다. let은 var와 다르게 중복 선언을 막는다.
c = 5;
console.log(c);
//값을 재할당 하는것은 가능하다!




// 3. const 키워드
// - 재선언 및 재할당 다 안됨
// - 따라서 선언과 할당이 동시에 이뤄져야함
// - 언제 사용? : "변하지 않는 값"을 변수에 저장할때
// ex. (const PI = 3.1415922653)
// const b; //error: 선언만 함
const b = 3;
console.log(b);

// b = 5; //error: 값 재할당 불가능



// [QUIZ] 변수
// Q1. 코드 실행시 q1 변수는 어떤 값이 될까?
let q1 = 3;
q1 - 2;
q1 = 3;
console.log(q1); //3 (q1에서 2를 뺐지만 q1변수에 값을 재할당하지 않았음 -> 그대로 3 출력)


// Q2. 다음 코드 실행시 q2 변수는 어떤 값이 될까?
let q2 = 10;
q2 = q2 + 5; //15
q2 = q2 - 2; //13
console.log(q2);

// Q3. 다음 코드 실행시 q3 변수는 어떤 값이 될까?
const q3 = 1;
// q3 = q3 + 1; //error: const 값은 재할당 불가
console.log(q3);



/*
  정리
  - var: es6 이전에 사용되던 변수 선언 키워드 -> 지양하는 추세
  - let: 변수 선언 키워드
       - 변수 선언 -> 값 할당
       - 변수 중복 선언 불가능
  - const: 상수 선언 키워드
       - 상수: 변하지 않는 값 (ex. 3.14159265359, 'How are you?')
       - 변수 선언과 값을 할당이 동시에
       - 재할당 불가능
 */



//식별자
//: 이름을 붙일 때 사용하는 단어 (변수명, 함수명 등)
//식별자 규칙
//- 키워드 사용 불가
//  (특별한 역할을 이미 하고 있는 단어)
//  const var let void return for while of else 등
//- 숫자로 시작할 수 없다
//  숫자가 들어갈 수는 있지만 시작은 불가능
//- 특수문자: _ 와 $만 허용
//- 공백 문자(스페이스바) 사용 불가능


// [QUIZ] 다음 중 식별자 가능한 것? 
// apple *
// 1apple 불가
// let 불가
// $apple *
// APPLE *
// apple5 *
// _ * (특수문자만 있지만 특수문자 사용 가능하기 때문에 사용가능)
// $apple *
// apple good 불가
// _apple *
// Apple *



//식별자(변수)를 작성할 때
//user와 id를 동시에 쓰고자 한다면
//user_id (snake_case)
//userId (camelCase)
//->식별자에 단어 두개 이상 작성하고싶은 경우
//  :camelCase가 관례.
//ex. redApple isWater